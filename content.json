{"meta":{"title":"Mikkeller Script","subtitle":"행복을 찾아서-","description":"자바스크립트 끝이 어딘지 보자구","author":"Myeongwook Kim","url":"http://mikkeller.github.io"},"pages":[],"posts":[{"title":"Why Front-end?","slug":"why","date":"2018-04-12T11:00:00.000Z","updated":"2018-04-12T11:38:38.264Z","comments":true,"path":"2018/04/12/why/","link":"","permalink":"http://mikkeller.github.io/2018/04/12/why/","excerpt":"","text":"Why?내가 UI개발 할 때 느껴왔던 게 있어.내가 마크업한 요소 안에 Back-end에서 값을 뿌려주는 것을 보고 어떻게 DB에서 데이터를 가져올 수 있는 거지? 그 과정이 신기하고 궁금했거든.우리 회사 생활을 하면서 내가 바라 본 android, ios, asp(우리 회사는 asp를 사용해, 지금은 .NET까지 도입이 됐어) 개발자. 그들이 사용하는 각각의 언어로 구성된 세계가 너무 멋져 보였어.나는 원래 평범한 걸 싫어해, 평범한 삶을 살고 싶지는 않아 재미 없어. 남들처럼 보통 실력을 유지하면서 보통 회사를 오래오래 다니다가 보통 가정을 만들고 그렇게 재미없는 삶을 살고 싶지는 않다는거지.그래서 나는 선택했어 UI개발과 가장 가까운 Front-end.왜 하필 JavaScript냐고? 각각의 언어에서 장점들을 가져와 개발된 언어잖아, 물론 단점도 있지만 그 단점을 충분히 보완할 수 있는 기능들이 있지.자바에서는 문법과 ‘원시 값 vs 객체 관계’를, 스키마와 오크(awk)에서는 일급 객체인 함수를, 셀프에서는 프로토타입 상속, 펄과 파이썬에서는 문자열과 배열, 정규식을 빌려왔지. JavaScript는 마치 유럽 올스타팀(호나우딩요, 제라드, 즐라탄, 올리버칸, 호나우두 등등)을 보는 것 같아! 겁나 멋져.UI 없이 프로세스 형태로 존재하는 Back-end 보다는 UI개발을 하는 현재의 나와 가장 잘 맞는다고 생각되는 Front-end가 더 끌렸던 거지.","categories":[],"tags":[]},{"title":"JavaScript_Person 1회","slug":"person_01","date":"2018-04-08T08:54:00.000Z","updated":"2018-04-09T11:08:27.438Z","comments":true,"path":"2018/04/08/person_01/","link":"","permalink":"http://mikkeller.github.io/2018/04/08/person_01/","excerpt":"","text":"자바스크립트는 어떻게 만들어졌는가?넷스케이프는 넷스케이프 내비게이터라는 전용 웹 브라우저를 만들었는데, 이 브라우저는 1990년대에 걸쳐 지배적인 위치를 독점하고 있었습니다. 모자이크 개발에 참여한 사람들 중 몇 명이 내비게이터 개발에도 참여했지만, 두 브라우저는 의도적으로 코드를 공유하지 않았습니다. 넷스케이프는 웹이 더 동적이어야 함을 빨리 깨달았습니다. 당시에는 사용자가 단순히 폼에 정확한 값을 입력했는지 체크하기만 할 때도 서버에 데이터를 보내고 피드백을 받아야만 했습니다. 1995년, 넷스케이프는 브랜던 아이크를 고용하면서 스키마(Lisp 언어의 변형)을 브라우저에 구현하는 역할을 맡겼습니다. 브랜던 아이크가 작업을 시작하기 전에, 넷스케이프는 하드웨어/소프트웨어 회사인 썬(현재는 오라클에 인수된)과 협력하여 더 정적인 프로그래밍 언어인 자바를 내비게이터에 이식하려 하고 있었습니다. 따라서 넷스케이프에서는 웹에 2가지 프로그래밍 언어, 자바와 스크립트 언어가 필요한지에 관한 열띤 토론이 벌어졌습니다. 스크립트 언어의 지지자들은 다음과 같은 근거를 들었습니다. 우리는 이미지, 플로그인, 자바 애플릿 같은 구성 요소를 활용하여 웹 콘텐츠를 만들어내는 웹 디자이너들과 시간제 프로그래머들에게 ‘조합용 언어’를 제공하려 했습니다. 우리가 볼 때 자바는 비싼 임금을 받는 프로그래머들이 쓰는 ‘컴포넌트 언어’였습니다. 반면, 조합 프로그래머, 즉 웹 페이지 디자이너들은 [스크립트 언어]를 써서 컴포넌트를 조립하고 그들의 상호작용을 자동화하려 할 것이라고 보았습니다. 넷스케이프 고위층은 스크립트 언어의 문법이 자바와 비슷해 보이게 만들기로 했습니다. 이런 결정에 따라 펄이나 파이썬, TCL, 스키마 같은 기존 언어를 도입하려던 구상은 배제됐습니다. 여러 가지 경쟁 제안 속에서 자바스크립트의 아이디어를 지키려면 넷스케이프는 시제품이 필요했고, 브랜던 아이크는 1995년 5월, 단 10일 만에 시제품을 만들었습니다. 마크 앤드리슨의 제안에 따라 이 언어에 모카라는 이름을 붙였습니다. 당시 여러 가지 언어에 ‘라이브’라는 접두사가 붙어 있었으므로 넷스케이프 마케팅팀은 나중에 이 언어의 이름을 ‘라이브스크립트’라고 바꿔서 상표로 등록했습니다. 1995년 11월 말, 내비게이터 2.0B3이 라이브스크립트를 내장한 채 출시됐고, 이 시점까지는 별다른 변화가 없었습니다. 1995년 12월 초, 자바의 영향력이 강해지고 썬에서 자바라는 등록상표를 넷스케이프에서 사용하도록 허가하면서 라이브스크립트는 다시 자바스크립트로 이름이 바뀐 채 현재까지 사용되고 있습니다. 자바스크립트의 영향력과 성질자바스크립트를 만든 브랜던 아이크는 다른 여러 개의 프로그래밍 언어에서 개념을 빌려왔습니다.자바에서는 문법과 ‘원시 값 vs 객체 관계’를, 스키마와 오크(AWK)에서는 일급 객체인 함수를, 셀프에서는 프로토타입 상속을, 펄과 파이썬에서는 문자열과 배열, 정규표현식을 빌려왔습니다. 자바스크립트는 변덕스러울 뿐만 아니라 블록 수준 스코프나 모듈, 하위 클래스 지원 등의 기능이 빠져 있습니다.반면 여러 가지 강력한 기능이 있어서 이런 문제를 우회할 수 있기도 합니다. 다른 언어에서는 보통 언어의 기능을 배운다면 자바스크립트에서는 대신 패턴을 배울 때가 많습니다. 워낙 여러 언어로부터 영향을 받은 덕에 자바스크립트의 프로그래밍 스타일은 함수형 프로그래밍(일급 객체인 함수, 내장된 map과 reduce 등)과 객체지향 프로그래밍(객체, 상속)을 함께 사용하곤 합니다. ECMAScript 표준화자바스크립트가 등장한 후, MS에서 1996년 8월 IE 3.0에 같은 언어를 JScript라는 이름으로 구현했습니다. MS를 견제하려는 의도를 어느 정도 포함해서, 넷스케이프는 자바스크립트를 표준화하기로 하고 표준 기관인 ECMA 인터내셔널에 표준화를 주관해달라고 요청했습니다. ECMA-262 명세는 1996년 11월에 시작했습니다. 썬(지금의 오라클)에서 자바라는 이름으로 상표를 소유하고 있었으므로 표준 언어의 공식 이름을 자바스크립트라고 부를 수는 없었으므로 자바스크립트와 ECMA를 합쳐 ECMAScript라는 이름을 붙였습니다. 하지만 이 이름은 언어 버전을 가리킬 떄만 쓰이고, 모든 사람이 여전히 이 언어를 자바스크립트라고 부릅니다. 문법세미콜론 규칙 일반적으로 문은 세미콜론으로 닫는다. 블록으로 끝나는 문은 예외다. 자바스크립트에서 세미콜론은 옵션이며, 생략한 세미콜론은 자동으로 삽입된다. 하지만 이 기능은 완벽하지 않으므로, 항상 세미콜론을 명시적으로 써야한다.다음 문이 블록으로 끝날 때는 세미콜론이 붙지 않는다. (기초가 부족했던 나에게 항상 헷갈렸던 부분이다.) 루프: for, while(do-while은 아님) 분기: if, switch, try 함수 선언(함수 표현식 아님) 다음 예제는 while과 do-while을 비교한 것이다. while (a &gt; 0) { a–; } // 세미콜론 없음 do { a–; } while (a &gt; 0); 다음 예제는 함수 선언과 함수 표현식의 비교다. 후자는 세미콜론으로 끝나는 var 선언문이므로 세미콜론을 썼다. functuon foo() { // … } // 세미콜론 없음 var foo = function() { // … }; 블록 다음에 세미콜론을 쓰면 빈 문으로 간주하므로 문법 에러가 발생되지는 않는다.","categories":[],"tags":[]},{"title":"JavaScript_Study 2회","slug":"first-p","date":"2018-04-01T04:00:00.000Z","updated":"2018-04-12T11:41:06.621Z","comments":true,"path":"2018/04/01/first-p/","link":"","permalink":"http://mikkeller.github.io/2018/04/01/first-p/","excerpt":"","text":"값, 식, 문(표현과 연산자)https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators","categories":[],"tags":[]}]}