{"meta":{"title":"Mikkeller Script","subtitle":"행복을 찾아서-","description":"자바스크립트의 끝","author":"Myeongwook Kim","url":"http://mikkeller.github.io"},"pages":[],"posts":[{"title":"Webpack ModuleBundle Config","slug":"Webpack","date":"2018-08-14T06:33:43.000Z","updated":"2018-08-16T00:53:04.249Z","comments":true,"path":"2018/08/14/Webpack/","link":"","permalink":"http://mikkeller.github.io/2018/08/14/Webpack/","excerpt":"","text":"Webpack develop config npm init -y 로 package.json 만들고 시작 npm i -D babel babel-cli babel-loader babel-preset-env webpack webpack-cli style-loader css-loader sass-loader mini-css-extract-plugin 로 설치한다. root에 .babelrc 파일 생성(babel사용) 아래와 같이 파일 내용을 작성 해준다. 12345&#123; &quot;presets&quot;: [ [&quot;env&quot;] ]&#125; root에 .webpack.config.js 파일 생성(webpack사용) 아래와 같이 파일 내용을 작성 해준다. 1234567891011121314151617181920212223242526272829303132333435363738394041const path = require(&apos;path&apos;);const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;); // sass를 css로 뱉어주는 pluginconst UglifyJSPlugin = require(&apos;uglifyjs-webpack-plugin&apos;); // uglifyjs plugin - js 용량 압축 module.exports = &#123; mode: &apos;development&apos;, // webpack4에서 추가되었습니다. mode가 development면 개발용, production이면 배포용입니다. 배포용 일 경우에는 알아서 최적화가 적용됩니다. 따라서 기존 최적화플러그인들이 대량으로 호환되지 않습니다. entry: &apos;./src/index.js&apos;, output: &#123; path: path.resolve(__dirname, &apos;public&apos;), filename: &apos;index.bundle.js&apos; &#125;, module: &#123; rules: [ &#123; test: /\\.scss$/, use: [ // webpack4에서는 extract-text-webpack-plugin이 아직 적용되지 않았다. // mini-css-extract-plugin로 대체하여 sass를 내부 style로 번들시키지 않고 css 파일로 별도 분리시켜준다. MiniCssExtractPlugin.loader, &#123; loader: &apos;css-loader&apos; &#125;, &#123; loader: &apos;sass-loader&apos; &#125; ], &#125;, &#123; test: /\\.js$/, loader: &apos;babel-loader&apos;, exclude: /node_modules/ &#125; ] &#125;, optimization: &#123; minimizer: [ new UglifyJSPlugin() ] &#125;, plugins: [ new MiniCssExtractPlugin(&#123; filename: &apos;styles.css&apos; &#125;) ]&#125;; src 폴더에 있는 index.js를 index.bundle.js로 번들시킬 거니까 src 폴더도 만들어주고 index.js도 만들어줍니다. package.json에 script를 추가해줍니다. npm run start를 입력하면, 이제 webpack을 watch 시킬 수 있습니다. 1234&quot;start&quot;: &quot;webpack --mode=development --watch&quot;,* 위의 webpack.config.js 에 module.exports 에 있는 mode에 development라고 작성하였는데,package.json에서 webpack 실행 문구에 mode까지 함께 기재해주면 module.exports에서 기재하지 않아도 된다. D2Coding ligatures D2Coding 공식 홈페이지: https://github.com/naver/d2codingfont 설정방법 intelliJ에 개발 font 사용하기(D2Coding) Settings &gt; Editor &gt; Colors &amp; Fonts &gt; Font로 이동합니다. font를 'D2Coding-Ligatures’로 변경합니다. 하단의 ‘Enable font ligatures’ 체크박스를 선택합니다. 현재 설정 babel sass(css 파일로 변환하여 붙게 작업) bundling(아직 Module 나누기 전)","categories":[{"name":"Config","slug":"Config","permalink":"http://mikkeller.github.io/categories/Config/"},{"name":"Webpack","slug":"Config/Webpack","permalink":"http://mikkeller.github.io/categories/Config/Webpack/"}],"tags":[]},{"title":"Prototype","slug":"Start","date":"2018-08-14T01:34:48.000Z","updated":"2018-09-09T06:22:35.819Z","comments":true,"path":"2018/08/14/Start/","link":"","permalink":"http://mikkeller.github.io/2018/08/14/Start/","excerpt":"","text":"Youtube 동영상 테스트 1234/** * __proto__는 자신의 부모 역할을 하는 프로토타입 객체를 가리킨다. * function의 prototype은 이 함수가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 프로토타입 객체를 가리킨다. */ 자바스크립트에서 모든 객체는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 객체를 자신의 프로토타입 객체(부모객체)로 취급한다. 모든 객체에는 proto 가 있다. 상속 받아서 사용할 수 있다. (이것을 프로토타입 체이닝 이라 부른다) 상속 받을 proto 를 명시적으로 바꿀 수 있다. This 바인딩 (call, apply) 123456789var Person = function(arg) &#123; if(!(this instanceof arguments.callee)) &#123; return new Person(arg); &#125; this.name = arg ? arg : 0;&#125;var mw = Person(&apos;wook&apos;);console.log(mw.name); 생성자 함수를 호출 할 때 빈 객체가 생성된다. (코드 내부에서 this는 이 빈 객체에 바인딩 된다) 빈 객체는 생성자 함수.prototype을 가리킨다. __proto__가 생성자 함수.prototype을 가리키는 것이다. new를 붙이지 않고 생성자 함수를 호출 할 경우를 대비하여 강제로 인스턴스를 생성하는 패턴도 넣어주었다. arguments.callee는 호출된 함수를 가리킨다.","categories":[{"name":"Programming","slug":"Programming","permalink":"http://mikkeller.github.io/categories/Programming/"},{"name":"JavaScript","slug":"Programming/JavaScript","permalink":"http://mikkeller.github.io/categories/Programming/JavaScript/"}],"tags":[]}]}