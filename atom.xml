<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mikkeller Script</title>
  
  <subtitle>행복을 찾아서-</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mikkeller.github.io/"/>
  <updated>2018-08-16T00:53:04.249Z</updated>
  <id>http://mikkeller.github.io/</id>
  
  <author>
    <name>Myeongwook Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpack ModuleBundle Config</title>
    <link href="http://mikkeller.github.io/2018/08/14/Webpack/"/>
    <id>http://mikkeller.github.io/2018/08/14/Webpack/</id>
    <published>2018-08-14T06:33:43.000Z</published>
    <updated>2018-08-16T00:53:04.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-develop-config"><a class="markdownIt-Anchor" href="#webpack-develop-config"></a> Webpack develop config</h1><ul><li>npm init -y 로 package.json 만들고 시작</li><li>npm i -D babel babel-cli babel-loader babel-preset-env webpack webpack-cli style-loader css-loader sass-loader mini-css-extract-plugin 로 설치한다.</li><li>root에 .babelrc 파일 생성(babel사용) 아래와 같이 파일 내용을 작성 해준다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        [&quot;env&quot;]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>root에 .webpack.config.js 파일 생성(webpack사용) 아래와 같이 파일 내용을 작성 해준다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;); // sass를 css로 뱉어주는 plugin</span><br><span class="line">const UglifyJSPlugin = require(&apos;uglifyjs-webpack-plugin&apos;); // uglifyjs plugin - js 용량 압축 </span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &apos;development&apos;, // webpack4에서 추가되었습니다. mode가 development면 개발용, production이면 배포용입니다. 배포용 일 경우에는 알아서 최적화가 적용됩니다. 따라서 기존 최적화플러그인들이 대량으로 호환되지 않습니다.</span><br><span class="line">    entry: &apos;./src/index.js&apos;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &apos;public&apos;),</span><br><span class="line">        filename: &apos;index.bundle.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.scss$/,</span><br><span class="line">                use: [</span><br><span class="line">                    // webpack4에서는 extract-text-webpack-plugin이 아직 적용되지 않았다.</span><br><span class="line">                    // mini-css-extract-plugin로 대체하여 sass를 내부 style로 번들시키지 않고 css 파일로 별도 분리시켜준다.</span><br><span class="line">                    MiniCssExtractPlugin.loader, </span><br><span class="line">                    &#123; loader: &apos;css-loader&apos; &#125;,</span><br><span class="line">                    &#123; loader: &apos;sass-loader&apos; &#125;</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js$/,</span><br><span class="line">                loader: &apos;babel-loader&apos;,</span><br><span class="line">                exclude: /node_modules/</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            new UglifyJSPlugin()</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: &apos;styles.css&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>src 폴더에 있는 index.js를 index.bundle.js로 번들시킬 거니까 src 폴더도 만들어주고 index.js도 만들어줍니다.</li><li>package.json에 script를 추가해줍니다. npm run start를 입력하면, 이제 webpack을 watch 시킬 수 있습니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;webpack --mode=development --watch&quot;,</span><br><span class="line"></span><br><span class="line">* 위의 webpack.config.js 에 module.exports 에 있는 mode에 development라고 작성하였는데,</span><br><span class="line">package.json에서 webpack 실행 문구에 mode까지 함께 기재해주면 module.exports에서 기재하지 않아도 된다.</span><br></pre></td></tr></table></figure><h1 id="d2coding-ligatures"><a class="markdownIt-Anchor" href="#d2coding-ligatures"></a> D2Coding ligatures</h1><p>D2Coding 공식 홈페이지: <a href="https://github.com/naver/d2codingfont" target="_blank">https://github.com/naver/d2codingfont</a></p><h2 id="설정방법"><a class="markdownIt-Anchor" href="#설정방법"></a> 설정방법</h2><p>intelliJ에 개발 font 사용하기(D2Coding)</p><ol><li>Settings &gt; Editor &gt; Colors &amp; Fonts &gt; Font로 이동합니다.</li><li>font를 'D2Coding-Ligatures’로 변경합니다.</li><li>하단의 ‘Enable font ligatures’ 체크박스를 선택합니다.</li></ol><br><br><br><br><br><h1 id="현재-설정"><a class="markdownIt-Anchor" href="#현재-설정"></a> 현재 설정</h1><ul><li>babel</li><li>sass(css 파일로 변환하여 붙게 작업)</li><li>bundling(아직 Module 나누기 전)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack-develop-config&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#webpack-develop-config&quot;&gt;&lt;/a&gt; Webpack develop config&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;npm in
      
    
    </summary>
    
      <category term="Config" scheme="http://mikkeller.github.io/categories/Config/"/>
    
      <category term="Webpack" scheme="http://mikkeller.github.io/categories/Config/Webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>Prototype</title>
    <link href="http://mikkeller.github.io/2018/08/14/Start/"/>
    <id>http://mikkeller.github.io/2018/08/14/Start/</id>
    <published>2018-08-14T01:34:48.000Z</published>
    <updated>2018-09-02T09:15:16.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="맨오브라만차"><a class="markdownIt-Anchor" href="#맨오브라만차"></a> 맨오브라만차</h1><div class="video-container"><iframe src="//www.youtube.com/embed/NmJN0L2PdOk" frameborder="0" allowfullscreen></iframe></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * __proto__는 자신의 부모 역할을 하는 프로토타입 객체를 가리킨다.</span><br><span class="line"> * function의 prototype은 이 함수가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 프로토타입 객체를 가리킨다.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><ul><li>자바스크립트에서 모든 객체는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 객체를 자신의 프로토타입 객체(부모객체)로 취급한다.</li><li>모든 객체에는 <strong>proto</strong> 가 있다.</li><li>상속 받아서 사용할 수 있다. (이것을 프로토타입 체이닝 이라 부른다)</li><li>상속 받을 <strong>proto</strong> 를 명시적으로 바꿀 수 있다. This 바인딩 (call, apply)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var Person = function(arg) &#123;</span><br><span class="line">    if(!(this instanceof arguments.callee)) &#123;</span><br><span class="line">        return new Person(arg);</span><br><span class="line">    &#125;</span><br><span class="line">    this.name = arg ? arg : 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var mw = Person(&apos;wook&apos;);</span><br><span class="line">console.log(mw.name);</span><br></pre></td></tr></table></figure><ul><li>생성자 함수를 호출 할 때 빈 객체가 생성된다. (코드 내부에서 this는 이 빈 객체에 바인딩 된다)</li><li>빈 객체는 생성자 함수.prototype을 가리킨다. __proto__가 생성자 함수.prototype을 가리키는 것이다.</li><li>new를 붙이지 않고 생성자 함수를 호출 할 경우를 대비하여 강제로 인스턴스를 생성하는 패턴도 넣어주었다.</li><li>arguments.callee는 호출된 함수를 가리킨다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;맨오브라만차&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#맨오브라만차&quot;&gt;&lt;/a&gt; 맨오브라만차&lt;/h1&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/emb
      
    
    </summary>
    
      <category term="Programming" scheme="http://mikkeller.github.io/categories/Programming/"/>
    
      <category term="JavaScript" scheme="http://mikkeller.github.io/categories/Programming/JavaScript/"/>
    
    
  </entry>
  
</feed>
